import os
import logging
import google.generativeai as genai
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

load_dotenv()
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

GEMINI_API_KEY=os.getenv("GEMINI_API_KEY")
TELEGRAM_BOT_TOKEN=os.getenv("BOT_TOKEN")

genai.configure(api_key=GEMINI_API_KEY)
chat_context = []
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}
safety_settings = [
    {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_NONE",
    },
    {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_NONE",
    },
    {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_NONE",
    },
    {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_NONE",
    },
]
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro-latest",
    safety_settings=safety_settings,
    generation_config=generation_config,
)
chat_session = model.start_chat(
    history=chat_context
)

async def get_response(user_input):
    """communicate with the Gemini and get the response. Sending the current user input
    to the Gemini with the history (context).

    Args:
        user_input (string): as its name, pass the user's prompts into the chatbot
        
    Returns:
        The response generated by AI in string.
    """
    response = chat_session.send_message(user_input)
    chat_context.append({"role": "user", "content": user_input})
    chat_context.append({"role": "model", "content": response.text})
    
    return response.text

# TODO: Implement the function to delete the history.
# More specifically, user should send a "Start a new conversation" command.
def remove_history():
    global chat_context
    chat_context = []


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="I'm a bot, please talk to me")
    
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    response = await get_response(user_input)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=response)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ log the errors and send a message to the user"""
    print(f"Update: '{update}' caused error '{context.error}'")
    
    #send the error message to the user
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="I'm sorry, something went wrong. Please try again later."
        )


if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    start_handler = CommandHandler("start", start)
    chat_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), chat)
    remove_history_handler = CommandHandler("new", remove_history)
    
    application.add_handler(start_handler)
    application.add_handler(chat_handler)
    application.add_error_handler(error_handler)
    
    application.run_polling()